#include <string>
#include <fstream>

#define DEBUG 1

#if DEBUG
#include <chrono>

class Timing {
    std::chrono::time_point<std::chrono::high_resolution_clock> start;
    std::chrono::time_point<std::chrono::high_resolution_clock> end;
    std::chrono::duration<float> duration;
public:
    Timing() {
        start = std::chrono::high_resolution_clock::now();
    }
    
    ~Timing() {
        end = std::chrono::high_resolution_clock::now();
        duration = end - start;
        std::cout << duration.count() << std::endl;
    }
};

#endif

class Log {
    time_t timestamp;
    std::string Error;
public:
    Log(const std::string& message) : Error(message){
        timestamp = std::chrono::system_clock::to_time_t(std::chrono::system_clock::now());
    }

    const char* to_string() {
        std::string rtrn = "";
        rtrn += ctime(&timestamp);
        rtrn += "[";
        rtrn += Error;
        rtrn += "]\n\n";
        return (rtrn.c_str());
    }
};

bool log(const std::string& error_message) {
    #if DEBUG
        Timing T;
    #endif
    std::fstream file;
    file.open("log.txt", std::fstream::out | std::fstream::app);
    file << Log(error_message).to_string();
    file.close();
}
